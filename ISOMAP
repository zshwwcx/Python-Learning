import numpy as np
import os

os.chdir(r'F:\Courses\DataMining\Homework\2\data')

for file_name in os.listdir():
    file_of_prime_data=open(r'%s'%file_name,'r')
    out_put_file=open(r'F:\Courses\DataMining\Homework\2\output\ISOMAP\%s'%iterator_file,'a')
    out_put_file_2=open(r'F:\Courses\DataMining\Homework\2\output\ISOMAP\result\%s'%iterator_file,'a')#此步骤需要添加一个文件夹
    
    #data preprocess,transform text data into matrix
    list_of_prime_data=[]#store prime float data,for data process,save the end signal
    for line in file_of_prime_data:
        list_of_prime_string=line.split(',')#prime data,the end signal is 1/-1,string.
        for var in list_of_prime_string:
            list_of_prime_data.append(float(var))
    list_of_prime_data=np.matrix(list_of_prime_data)#transform the data into matrix,for computing

    #k-NN algrithm,get the neighbour of every point,we take k=4 here.Get the weighted graph,for Dijkstra algrithm,stored in list_of_prime_data.
    x,y=np.shape(list_of_prime_data)
    #construct the input matrix for Dijkstra algrithm.
    list_of_distance=[]
    tm=[]
    _=float('inf')
    for t in range(x):
        for m in range(x):
            tm.append(_)
        list_of_distance.append(tm)
    list_of_distance=np.matrix(list_of_distance)
    matrix_of_dijkstra=list_of_distance.copy()

    num_of_destination=0
    count_now=0
    for count_now in range(x):
        distance_of_vector=[]#store the data of distance from every point to the others
        for num_of_destination in range(x):
            cpt=np.linalg.norm(list_of_prime_data[count_now,:-1]-list_of_prime_data[num_of_destination,:-1])
            list_of_distance[count_now,num_of_destination]=cpt#a x*x distance matrix
    for count_now in range(x):
        col=0
        while col<4:
            num=list_of_distance[count_now,:].argmax()
            max_value=list_of_distance[count_now,:].max()
            list_of_distance[count_now,num]=0
            matrix_of_dijkstra[count_now,num]=max_value#complete the construction of Dijkstra algrithm
    out_put_file.write(np.str(matrix_of_dijkstra))

    #MDS algrithm.Input is the distance matrix by Dijkstra algrithm.
    N=matrix_of_dijkstra.shape[0]
    T=np.zeros((N,N))
    K=np.dot(matrix_of_dijkstra,np.transpose(matrix_of_dijkstra))
    matrix_of_dijkstra_2=matrix_of_dijkstra**2
    H=np.eye(N)-1/N
    T=-0.5*np.dot(np.dot(H,matrix_of_dijkstra_2),H)

    eigVal,eigVec=np.linalg.eig(T)
    X=np.dot(eigVec[:,:2],np.diag(np.sqrt(eigVal[:2])))
    for i in range(N):
        for j in range(i+1,N):
            out_put_file_2.write(np.str(np.linalg.norm(X[i]-X[j])))

    


